{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE ExtendedDefaultRules #-}
{-# LANGUAGE FunctionalDependencies #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE NoMonomorphismRestriction #-}

module MetricsSpec (spec, main) where

import Control.Exception.Safe
import Control.Monad (forM_)
import qualified System.IO
import Test.Hspec
import Torch
import Torch.Serialize
import Torch.Vision
import Torch.Vision.Metrics

main = hspec spec

-- See https://github.com/rafaelpadilla/Object-Detection-Metrics
recall_vs_precision :: [(Float, Float)]
recall_vs_precision =
  [ (0.0666, 1),
    (0.0666, 0.5),
    (0.1333, 0.6666),
    (0.1333, 0.5),
    (0.1333, 0.4),
    (0.1333, 0.3333),
    (0.1333, 0.2857),
    (0.1333, 0.25),
    (0.1333, 0.2222),
    (0.2, 0.3),
    (0.2, 0.2727),
    (0.2666, 0.3333),
    (0.3333, 0.3846),
    (0.4, 0.4285),
    (0.4, 0.4),
    (0.4, 0.375),
    (0.4, 0.3529),
    (0.4, 0.3333),
    (0.4, 0.3157),
    (0.4, 0.3),
    (0.4, 0.2857),
    (0.4, 0.2727),
    (0.4666, 0.3043),
    (0.4666, 0.2916)
  ]

confidence_tp =
  [ (0.88, False),
    (0.70, True),
    (0.80, False),
    (0.71, False),
    (0.54, True),
    (0.74, False),
    (0.18, True),
    (0.67, False),
    (0.38, False),
    (0.91, True),
    (0.44, False),
    (0.35, False),
    (0.78, False),
    (0.45, False),
    (0.14, False),
    (0.62, True),
    (0.44, False),
    (0.95, True),
    (0.23, False),
    (0.45, False),
    (0.84, False),
    (0.43, False),
    (0.48, True),
    (0.95, False)
  ]

tp =
  [ 1,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    0,
    0,
    0,
    0,
    1,
    0,
    1,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    1,
    1,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0
  ]

conf =
  [ 0.9998,
    0.9010,
    0.8818,
    0.8863,
    0.8784,
    0.8821,
    0.7964,
    0.7073,
    0.6711,
    0.9597,
    0.6562,
    0.6525,
    0.4707,
    0.4293,
    0.3642,
    0.7246,
    0.3287,
    0.3094,
    0.2953,
    0.2794,
    0.2638,
    0.2511,
    0.2398,
    0.2406,
    0.2677,
    0.2059,
    0.2509,
    0.2020,
    0.2065,
    0.2310,
    0.1964,
    0.2767,
    0.2204,
    0.1644,
    0.1464,
    0.2030,
    0.1277,
    0.1709,
    0.1285,
    0.1186,
    0.1290,
    0.1287,
    0.1161,
    0.1240,
    0.0966,
    0.1419,
    0.0779,
    0.0745,
    0.0812,
    0.1091,
    0.1297,
    0.0651,
    0.0694,
    0.0634,
    0.1174,
    0.0620,
    0.0659,
    0.0589,
    0.0930,
    0.0585,
    0.0744,
    0.0543,
    0.0819,
    0.0906,
    0.0619,
    0.0651,
    0.0556,
    0.0454,
    0.0967,
    0.0596,
    0.0475,
    0.0460,
    0.0655,
    0.0386,
    0.0394,
    0.0367,
    0.0355,
    0.0358,
    0.0378,
    0.0544,
    0.0393,
    0.0444,
    0.0309,
    0.0304,
    0.1134,
    0.0780,
    0.0472,
    0.0426,
    0.0267,
    0.0280,
    0.0250,
    0.0258,
    0.0250,
    0.0383,
    0.0236,
    0.0268,
    0.0287,
    0.0225,
    0.0296,
    0.0224,
    0.0407,
    0.0312,
    0.0530,
    0.0269,
    0.0291,
    0.0225,
    0.0486,
    0.0226,
    0.0185,
    0.0516,
    0.0430,
    0.0265,
    0.0171,
    0.0236,
    0.0185,
    0.0277,
    0.0157,
    0.0333,
    0.0160,
    0.0315,
    0.0261,
    0.0147,
    0.0131,
    0.0133,
    0.0130,
    0.0193,
    0.0375,
    0.0129,
    0.0319,
    0.0119,
    0.0206,
    0.0198,
    0.0145,
    0.0319,
    0.0250,
    0.0117,
    0.0265,
    0.0136,
    0.0238,
    0.0121,
    0.0153,
    0.0103,
    0.0102,
    0.0253,
    0.0450,
    0.0131,
    0.0123,
    0.0152,
    0.0104,
    0.0128,
    0.0095,
    0.0090,
    0.0136,
    0.0249,
    0.0155,
    0.0102,
    0.0335,
    0.0086,
    0.0216,
    0.0124,
    0.0231,
    0.0087,
    0.0087,
    0.0076,
    0.0069,
    0.0153,
    0.0076,
    0.0071,
    0.0108,
    0.0103,
    0.0145,
    0.0071,
    0.0063,
    0.0066,
    0.0112,
    0.0205,
    0.0202,
    0.0123,
    0.0066,
    0.0109,
    0.0052,
    0.0076,
    0.0111,
    0.0052,
    0.0057,
    0.0063,
    0.0052,
    0.0066,
    0.0063,
    0.0050,
    0.0099,
    0.0047,
    0.0103,
    0.0051,
    0.0109,
    0.0047,
    0.0088,
    0.0045,
    0.0046,
    0.0100,
    0.0053,
    0.0050,
    0.0045,
    0.0048,
    0.0058,
    0.0043,
    0.0040,
    0.0048,
    0.0040,
    0.0072,
    0.0074,
    0.0068,
    0.0061,
    0.0040,
    0.0078,
    0.0053,
    0.0043,
    0.0097,
    0.0052,
    0.0055,
    0.0038,
    0.0035,
    0.0069,
    0.0046,
    0.0067,
    0.0044,
    0.0135,
    0.0037,
    0.0060,
    0.0122,
    0.0164,
    0.0096,
    0.0111,
    0.0126,
    0.0078,
    0.0052,
    0.0028,
    0.0030,
    0.0036,
    0.0043,
    0.0029,
    0.0106,
    0.0027,
    0.0048,
    0.0095,
    0.0026,
    0.0028,
    0.0029,
    0.0027,
    0.0039,
    0.0036,
    0.0028,
    0.0086,
    0.0085,
    0.0080,
    0.0025,
    0.0032,
    0.0061,
    0.0035,
    0.0080,
    0.0025,
    0.0028,
    0.0046,
    0.0023,
    0.0054,
    0.0032,
    0.0025,
    0.0022,
    0.0024,
    0.0028,
    0.0039,
    0.0039,
    0.0020,
    0.0048,
    0.0020,
    0.0021,
    0.0034,
    0.0019,
    0.0058,
    0.0023,
    0.0024,
    0.0024,
    0.0036,
    0.0065,
    0.0038,
    0.0063,
    0.0040,
    0.0018,
    0.0023,
    0.0020,
    0.0024,
    0.0033,
    0.0017,
    0.0019,
    0.0021,
    0.0027,
    0.0029,
    0.0036,
    0.0038,
    0.0018,
    0.0021,
    0.0023,
    0.0016,
    0.0097,
    0.0016,
    0.0044,
    0.0015,
    0.0022,
    0.0024,
    0.0042,
    0.0028,
    0.0020,
    0.0014,
    0.0017,
    0.0056,
    0.0015,
    0.0062,
    0.0017,
    0.0031,
    0.0021,
    0.0026,
    0.0049,
    0.0039,
    0.0019,
    0.0013,
    0.0016,
    0.0055,
    0.0035,
    0.0049,
    0.0015,
    0.0058,
    0.0014,
    0.0013,
    0.0029,
    0.0038,
    0.0012,
    0.0026,
    0.0013,
    0.0052,
    0.0016,
    0.0020,
    0.0014,
    0.0015,
    0.0019,
    0.0011,
    0.0011,
    0.0045,
    0.0012,
    0.0018,
    0.0021,
    0.0031,
    0.0013,
    0.0040,
    0.0041,
    0.0017,
    0.0012,
    0.0027,
    0.0019,
    0.0021,
    0.0044,
    0.0027,
    0.0017,
    0.0011,
    0.0016,
    0.0016,
    0.0031,
    0.0016,
    0.0011,
    0.0014,
    0.0019,
    0.0039,
    0.0038,
    0.0010,
    0.0011,
    0.0026,
    0.0011,
    0.0028,
    0.0011,
    0.0012,
    0.0031,
    0.0011,
    0.0016,
    0.0014,
    0.0012,
    0.0013,
    0.0028,
    0.0013,
    0.0013,
    0.0027,
    0.0019,
    0.0010,
    0.0010,
    0.0035,
    0.0019,
    0.0014,
    0.0023,
    0.0011,
    0.0019,
    0.0015,
    0.0010,
    0.0024,
    0.0032,
    0.0013,
    0.0028,
    0.0018,
    0.0013,
    0.0033,
    0.0014,
    0.0018,
    0.0015,
    0.0013,
    0.0033,
    0.0011,
    0.0012,
    0.0015,
    0.0015,
    0.0015,
    0.0013,
    0.0010,
    0.0015,
    0.0012,
    0.0011,
    0.0011,
    0.0011,
    0.0016,
    0.0015,
    0.0012,
    0.0011,
    0.0014,
    0.0020,
    0.0012,
    0.0012
  ]

classes =
  [ 56,
    40,
    39,
    40,
    72,
    40,
    39,
    40,
    39,
    68,
    40,
    40,
    40,
    40,
    40,
    0,
    39,
    40,
    39,
    39,
    39,
    39,
    41,
    41,
    41,
    39,
    41,
    40,
    68,
    41,
    73,
    40,
    41,
    41,
    41,
    74,
    73,
    39,
    73,
    39,
    39,
    73,
    40,
    39,
    39,
    41,
    41,
    40,
    39,
    39,
    41,
    40,
    41,
    40,
    68,
    39,
    41,
    41,
    45,
    39,
    39,
    45,
    39,
    41,
    40,
    39,
    41,
    40,
    41,
    39,
    45,
    45,
    39,
    40,
    73,
    40,
    60,
    41,
    45,
    39,
    41,
    41,
    40,
    41,
    41,
    39,
    41,
    39,
    40,
    68,
    72,
    68,
    39,
    73,
    41,
    60,
    39,
    69,
    74,
    56,
    40,
    41,
    71,
    41,
    39,
    45,
    39,
    45,
    40,
    39,
    45,
    45,
    41,
    69,
    73,
    45,
    56,
    39,
    73,
    74,
    39,
    39,
    72,
    39,
    41,
    69,
    71,
    39,
    39,
    41,
    40,
    39,
    45,
    44,
    39,
    56,
    45,
    45,
    39,
    69,
    41,
    72,
    40,
    43,
    39,
    45,
    40,
    45,
    41,
    41,
    45,
    39,
    41,
    41,
    45,
    39,
    39,
    39,
    68,
    39,
    41,
    73,
    60,
    45,
    39,
    71,
    45,
    39,
    45,
    39,
    45,
    56,
    39,
    68,
    39,
    74,
    39,
    45,
    39,
    73,
    72,
    68,
    60,
    40,
    69,
    39,
    40,
    41,
    56,
    45,
    39,
    41,
    71,
    39,
    41,
    40,
    0,
    40,
    71,
    45,
    39,
    45,
    60,
    41,
    69,
    56,
    41,
    39,
    69,
    69,
    68,
    45,
    68,
    39,
    69,
    41,
    39,
    45,
    68,
    45,
    45,
    45,
    41,
    41,
    41,
    40,
    41,
    40,
    41,
    69,
    39,
    44,
    39,
    45,
    39,
    68,
    40,
    40,
    45,
    73,
    69,
    39,
    40,
    0,
    45,
    40,
    56,
    56,
    40,
    74,
    39,
    40,
    45,
    69,
    44,
    69,
    56,
    69,
    45,
    68,
    40,
    39,
    41,
    45,
    41,
    39,
    41,
    40,
    68,
    45,
    41,
    69,
    72,
    44,
    39,
    40,
    39,
    39,
    39,
    39,
    39,
    41,
    41,
    39,
    72,
    69,
    41,
    41,
    73,
    56,
    45,
    41,
    60,
    39,
    39,
    39,
    45,
    60,
    0,
    39,
    71,
    69,
    40,
    41,
    73,
    44,
    40,
    41,
    68,
    41,
    39,
    74,
    71,
    73,
    44,
    40,
    45,
    73,
    41,
    39,
    39,
    41,
    41,
    41,
    40,
    72,
    41,
    39,
    45,
    56,
    73,
    39,
    69,
    69,
    41,
    40,
    45,
    41,
    68,
    56,
    45,
    68,
    39,
    45,
    56,
    40,
    39,
    73,
    39,
    73,
    45,
    45,
    45,
    45,
    45,
    60,
    68,
    71,
    73,
    43,
    39,
    39,
    39,
    45,
    45,
    39,
    39,
    56,
    68,
    68,
    45,
    73,
    56,
    39,
    69,
    56,
    71,
    39,
    69,
    41,
    69,
    45,
    45,
    41,
    39,
    68,
    45,
    56,
    41,
    39,
    39,
    72,
    45,
    45,
    68,
    41,
    41,
    41,
    73,
    72,
    44,
    60,
    45,
    43,
    39,
    41,
    70,
    39,
    45,
    69,
    71,
    41,
    74,
    41,
    39,
    39,
    41,
    39,
    40,
    73,
    39,
    68,
    41,
    45,
    39,
    39,
    41,
    39,
    45,
    43,
    41,
    45
  ]

spec :: Spec
spec = do
  describe "Metrics for computer vision" $ do
    it "recall & precistion to AP" $ do
      let (_, _, _, ap) = computeAP' recall_vs_precision
      ap `shouldBe` 0.24560957
    it "confidence & TP to AP" $ do
      computeRecallAndPrecision confidence_tp 15
        `shouldBe` [ (6.666667e-2, 1.0),
                     (6.666667e-2, 0.5),
                     (0.13333334, 0.6666667),
                     (0.13333334, 0.5),
                     (0.13333334, 0.4),
                     (0.13333334, 0.33333334),
                     (0.13333334, 0.2857143),
                     (0.13333334, 0.25),
                     (0.13333334, 0.22222222),
                     (0.2, 0.3),
                     (0.2, 0.27272728),
                     (0.26666668, 0.33333334),
                     (0.33333334, 0.3846154),
                     (0.4, 0.42857143),
                     (0.4, 0.4),
                     (0.4, 0.375),
                     (0.4, 0.3529412),
                     (0.4, 0.33333334),
                     (0.4, 0.31578946),
                     (0.4, 0.3),
                     (0.4, 0.2857143),
                     (0.4, 0.27272728),
                     (0.46666667, 0.3043478),
                     (0.46666667, 0.29166666)
                   ]
    it "metrics" $ do
      outputs_of_nms <- System.IO.withFile "test-data/metrics/outputs.bin" System.IO.ReadMode $ \h -> do
        loadBinary h (zeros' [432, 7])
      let xyxy_conf_cls_classid = asValue outputs_of_nms :: [[Float]]
      map (\(_ : _ : _ : _ : _ : _ : cid : _) -> cid) xyxy_conf_cls_classid `shouldBe` classes
    it "Compute AP from bounding boxes" $ do
      targets' <- readBoundingBox "test-data/metrics/COCO_val2014_000000000164.txt"
      let targets = map (toXYXY 416 416 . rescale 640 480 416 416) targets'
      outputs_of_nms <- System.IO.withFile "test-data/metrics/outputs.bin" System.IO.ReadMode $ \h -> do
        loadBinary h (zeros' [432, 7])
      let xyxy_conf_cls_classid = asValue outputs_of_nms :: [[Float]]
          inference_bbox = map (\[x0, y0, x1, y1, conf, cls_conf, cid] -> (BBox (round cid) x0 y0 x1 y1, conf)) xyxy_conf_cls_classid
          tp' = map (snd . snd) $ computeTPForBBox 0.5 targets inference_bbox
          exps = (map ((==) 1) tp)
      tp' `shouldBe` exps
      computeAPForBBox 0.5 targets inference_bbox
        `shouldBe` [ (39, (0.8, 0.2580645, 0.39024392, 0.5480921)),
                     (40, (1.0, 0.33333334, 0.5, 0.7984007)),
                     (41, (0.6, 0.11764706, 0.19672132, 0.2820028)),
                     (45, (0.16666667, 0.14285715, 0.15384616, 2.3809526e-2)),
                     (56, (1.0, 1.0, 1.0, 1.0)),
                     (60, (0.0, 0.0, 0.0, 0.0)),
                     (68, (1.0, 1.0, 1.0, 1.0)),
                     (69, (1.0, 0.5, 0.6666667, 0.5)),
                     (72, (1.0, 1.0, 1.0, 1.0))
                   ]

  describe "Bounding Box" $ do
    it "rescale" $ do
      let b = BoundingBox 39 0.615391 0.411156 0.012531 0.055979
          exp = BoundingBox 39 0.615391 0.43336698 1.2530999e-2 4.1984253e-2
      rescale 640 480 416 416 b `shouldBe` exp
    it "xywh -> xyxy" $ do
      let b = BoundingBox 39 0.615391 0.43336698 1.2530999e-2 4.1984253e-2
          exp = BBox 39 253.39621 171.54794 258.6091 189.0134
      toXYXY 416 416 b `shouldBe` exp
